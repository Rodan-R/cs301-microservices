stages:
  - lint
  - security
  - build
  - deploy

variables:
  IMAGE_NAME: '$CI_REGISTRY_IMAGE'

# --------------------------------
# Static Code Analysis (Lint + Format)
# --------------------------------
lint-check:
  stage: lint
  image: node:20-alpine
  script:
    - echo "Running ESLint and Prettier checks..."
    - npm ci
    - npm run lint
    - npm run format:check
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH =~ /^feature\//'

# --------------------------------
# Security Audit
# --------------------------------
security-audit:
  stage: security
  image: node:20-alpine
  script:
    - echo "Running npm audit for vulnerabilities..."
    - npm ci
    - npm run security:audit
  allow_failure: true # don't fail pipeline for minor issues
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

# --------------------------------
# Build Docker image and push
# --------------------------------
build-image:
  stage: build
  image: docker:24
  services:
    - docker:dind
  before_script:
    - echo "Logging into GitLab Container Registry..."
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - echo "Building Docker image..."
    - docker build -t "$IMAGE_NAME:$CI_COMMIT_SHA" .
    - echo "Pushing image with commit SHA tag..."
    - docker push "$IMAGE_NAME:$CI_COMMIT_SHA"
    - echo "Tagging image as latest..."
    - docker tag "$IMAGE_NAME:$CI_COMMIT_SHA" "$IMAGE_NAME:latest"
    - docker push "$IMAGE_NAME:latest"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  needs:
    - lint-check
    - security-audit

# --------------------------------
# Manual Deploy (placeholder)
# --------------------------------
deploy-prod:
  stage: deploy
  image: alpine:3.19
  needs: ['build-image']
  when: manual
  script:
    - echo "Deploy would happen here (EC2, ECS, etc.)"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
